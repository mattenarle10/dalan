service: dalan-api

frameworkVersion: '4'

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: dalan
    serverSideEncryption: AES256
  profile: dalan  # Your AWS profile
  memorySize: 1024  # Increased for YOLO model processing
  timeout: 30       # Increased timeout for image processing
  
  # Environment variables
  environment:
    ENVIRONMENT: ${self:provider.stage}
    SUPABASE_URL: ${env:SUPABASE_URL}
    SUPABASE_KEY: ${env:SUPABASE_KEY}
    SUPABASE_SERVICE_ROLE_KEY: ${env:SUPABASE_SERVICE_ROLE_KEY}
    SUPABASE_JWT_SECRET: ${env:SUPABASE_JWT_SECRET}
    S3_BUCKET: ${self:custom.s3BucketName}
    MODEL_S3_KEY: model/YOLOv8_Small_RDD.pt
    USE_S3_MODEL: true
    YOLO_QUEUE_URL: 
      Ref: YoloProcessingQueue
    AWS_REGION: ${self:provider.region}
  
  # IAM permissions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource: "arn:aws:s3:::${self:custom.s3BucketName}/*"
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource: "arn:aws:s3:::${self:custom.s3BucketName}"
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - Fn::GetAtt: [YoloProcessingQueue, Arn]
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

# Custom variables
custom:
  s3BucketName: dalan  # Use existing bucket
  pythonRequirements:
    dockerizePip: false
    slim: true
    strip: false
    useDownloadCache: true
    useStaticCache: true
    noDeploy:
      - boto3
      - botocore
    pipCmdExtraArgs:
      - --no-cache-dir
  
  # API Gateway settings - using default AWS domain
  # customDomain: disabled - no custom domain needed

# Functions
functions:
  
  # YOLO processing function (async)
  yoloProcessor:
    handler: handlers.detection.process.handler
    memorySize: 2048  # Higher memory for YOLO processing
    timeout: 300      # 5 minutes for processing
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - YoloProcessingQueue
              - Arn
          batchSize: 1
    layers:
      - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-opencv-python:1
    
  # Auth handlers
  login:
    handler: handlers.auth.login.handler
    events:
      - http:
          path: /auth/login
          method: POST
          cors: true
    environment:
      API_GATEWAY_STAGE: ${self:provider.stage}
          
  verifyToken:
    handler: handlers.auth.verify.handler
    events:
      - http:
          path: /auth/verify
          method: POST
          cors: true
    environment:
      API_GATEWAY_STAGE: ${self:provider.stage}
  
  # User handlers
  getUser:
    handler: handlers.users.get_user.handler
    events:
      - http:
          path: /users/{user_id}
          method: GET
          cors: true
    environment:
      API_GATEWAY_STAGE: ${self:provider.stage}
          
  updateUser:
    handler: handlers.users.update_user.handler
    events:
      - http:
          path: /users/{user_id}
          method: PUT
          cors: true
    environment:
      API_GATEWAY_STAGE: ${self:provider.stage}
  
  # Entry handlers
  getEntries:
    handler: handlers.entries.get_entries.handler
    events:
      - http:
          path: /entries
          method: GET
          cors: true
    environment:
      API_GATEWAY_STAGE: ${self:provider.stage}
          
  getEntry:
    handler: handlers.entries.get_entry.handler
    events:
      - http:
          path: /entries/{id}
          method: GET
          cors: true
    environment:
      API_GATEWAY_STAGE: ${self:provider.stage}
          
  createEntry:
    handler: handlers.entries.create_entry.handler
    events:
      - http:
          path: /entries
          method: POST
          cors: true
    layers:
      - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-opencv-python:1  # OpenCV layer
    environment:
      API_GATEWAY_STAGE: ${self:provider.stage}
    memorySize: 1024  # Increased for image processing
    timeout: 30       # Increased timeout for image processing
          
  updateEntry:
    handler: handlers.entries.update_entry.handler
    events:
      - http:
          path: /entries/{id}
          method: PUT
          cors: true
    environment:
      API_GATEWAY_STAGE: ${self:provider.stage}
          
  deleteEntry:
    handler: handlers.entries.delete_entry.handler
    events:
      - http:
          path: /entries/{id}
          method: DELETE
          cors: true
    environment:
      API_GATEWAY_STAGE: ${self:provider.stage}

# Resources
resources:
  Resources:
    # Note: Using existing S3 bucket 'dalan' - no need to create new one
    
    # SQS Queue for YOLO processing
    YoloProcessingQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: dalan-yolo-processing-${self:provider.stage}
        VisibilityTimeoutSeconds: 360  # 6 minutes (longer than function timeout)
        MessageRetentionPeriod: 1209600  # 14 days
        ReceiveMessageWaitTimeSeconds: 20  # Long polling
    
    # Dead Letter Queue for failed processing
    YoloProcessingDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: dalan-yolo-processing-dlq-${self:provider.stage}
        MessageRetentionPeriod: 1209600  # 14 days

# Plugins
plugins:
  - serverless-python-requirements
  - serverless-offline

# Package settings
package:
  patterns:
    - '!node_modules/**'
    - '!.git/**'
    - '!.pytest_cache/**'
    - '!tests/**'
    - '!.env'
    - '!venv/**'
    - '!__pycache__/**'
    - '!.DS_Store'
    - '!*.pyc'
    - '!*.pyo'
    - '!backup/**'  # Exclude backup directory with old code
